<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="reviewMapper">

	<resultMap id="reviewResultMap" type="review">
	    <result property="reviewNo" column="REVIEW_NO"/>
	    <result property="reviewTitle" column="REVIEW_TITLE"/>
	    <result property="reviewContent" column="REVIEW_CONTENT"/>
	    <result property="rating" column="RATING"/>
	    <result property="reviewThumbnailOrigin" column="REVIEW_THUMBNAIL_ORIGIN"/>
	    <result property="reviewThumbnailChange" column="REVIEW_THUMBNAIL_CHANGE"/>
	    <result property="reviewDate" column="REVIEW_DATE"/>
	    <result property="status" column="STATUS"/>
	    <result property="productNo" column="PRODUCT_NO"/>
	    <result property="memberId" column="MEMBER_ID"/>
	    <result property="memberName" column="MEMBER_NAME"/>
	    <result property="productChange" column="PRODUCT_CHANGE"/>
	    <result property="likeCount" column="LIKE_COUNT"/>
	    <result property="productName" column="PRODUCT_NAME"/>
	</resultMap>
	
	<select id="selectReviewList" parameterType="_int" resultMap="reviewResultMap">
	    SELECT
	        R.REVIEW_NO,
	        R.REVIEW_TITLE,
	        R.REVIEW_CONTENT,
	        R.RATING,
	        R.REVIEW_THUMBNAIL_ORIGIN,
	        R.REVIEW_THUMBNAIL_CHANGE,
	        R.REVIEW_DATE,
	        R.STATUS,
	        R.PRODUCT_NO,
	        R.MEMBER_ID,
	        M.MEMBER_NAME,
	        P.PRODUCT_CHANGE
	    FROM REVIEW R
	    JOIN MEMBER M ON R.MEMBER_ID = M.MEMBER_ID
	    JOIN PRODUCT P ON R.PRODUCT_NO = P.PRODUCT_NO
	    WHERE R.PRODUCT_NO = #{productNo}
	      AND R.STATUS = 'Y'
	    ORDER BY R.REVIEW_DATE DESC
	</select>

	<select id="selectReviewListCount" resultType="_int">
		SELECT
			COUNT(*)
		FROM REVIEW
		WHERE STATUS = 'Y'
	</select>

	<select id="selectAllReviewList" parameterType="pageInfo" resultMap="reviewResultMap">
		SELECT *
		FROM (
		    SELECT ROWNUM AS RNUM, A.*
		    FROM (
		        SELECT
		            R.REVIEW_NO,
		            R.REVIEW_TITLE,
		            R.REVIEW_CONTENT,
		            R.RATING,
		            R.REVIEW_THUMBNAIL_ORIGIN,
		            R.REVIEW_THUMBNAIL_CHANGE,
		            R.REVIEW_DATE,
		            R.STATUS,
		            R.PRODUCT_NO,
		            R.MEMBER_ID,
		            M.MEMBER_NAME,
		            P.PRODUCT_CHANGE,
		            P.PRODUCT_NAME
		        FROM REVIEW R
		        JOIN MEMBER M ON R.MEMBER_ID = M.MEMBER_ID
		        JOIN PRODUCT P ON R.PRODUCT_NO = P.PRODUCT_NO
		        WHERE R.STATUS = 'Y'
		        ORDER BY R.REVIEW_DATE DESC
		    ) A
		)
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
    </select>


	<select id="selectBestReviewList" resultMap="reviewResultMap">
	    SELECT * FROM (
	        SELECT
	            R.REVIEW_NO,
	            R.REVIEW_TITLE,
	            R.REVIEW_CONTENT,
	            R.RATING,
	            R.REVIEW_THUMBNAIL_ORIGIN,
	            R.REVIEW_THUMBNAIL_CHANGE,
	            R.REVIEW_DATE,
	            R.STATUS,
	            R.PRODUCT_NO,
	            R.MEMBER_ID,
	            M.MEMBER_NAME,
	            P.PRODUCT_CHANGE,
	            NVL(LIKE_TBL.LIKE_COUNT, 0) AS LIKE_COUNT
	        FROM REVIEW R
	        JOIN MEMBER M ON R.MEMBER_ID = M.MEMBER_ID
	        JOIN PRODUCT P ON R.PRODUCT_NO = P.PRODUCT_NO
	        LEFT JOIN (
	            SELECT REVIEW_NO, COUNT(*) AS LIKE_COUNT
	            FROM TB_LIKE
	            GROUP BY REVIEW_NO
	        ) LIKE_TBL ON R.REVIEW_NO = LIKE_TBL.REVIEW_NO
	        WHERE R.STATUS = 'Y'
	        ORDER BY LIKE_COUNT DESC, R.RATING DESC, R.REVIEW_DATE DESC
	    )
	    WHERE ROWNUM &lt;= 5
	</select>

	<insert id="insertReview" parameterType="review">
		INSERT INTO REVIEW (
			REVIEW_NO,
			REVIEW_TITLE,
			REVIEW_CONTENT,
			RATING,
			REVIEW_THUMBNAIL_ORIGIN,
			REVIEW_THUMBNAIL_CHANGE,
			REVIEW_DATE,
			STATUS,
			PRODUCT_NO,
			MEMBER_ID
		) VALUES (
			SEQ_REVIEW.NEXTVAL,
			#{reviewTitle},
			#{reviewContent},
			#{rating},
			NULL,
			'default_review.jpg',
			SYSDATE,
			#{status},
			#{productNo},
			#{memberId}
		)
	</insert>

	<update id="updateReview" parameterType="review">
		UPDATE REVIEW
		SET REVIEW_TITLE = #{reviewTitle},
			REVIEW_CONTENT = #{reviewContent},
			RATING = #{rating}
		WHERE REVIEW_NO = #{reviewNo}
		  AND MEMBER_ID = #{memberId}
		  AND STATUS = 'Y'
	</update>

	<update id="deleteReview" parameterType="review">
		UPDATE REVIEW
		SET STATUS = 'N'
		WHERE REVIEW_NO = #{reviewNo}
		  AND MEMBER_ID = #{memberId}
		  AND STATUS = 'Y'
	</update>

	<select id="selectReviewByNo" parameterType="_int" resultMap="reviewResultMap">
		SELECT
			R.REVIEW_NO,
			R.REVIEW_TITLE,
			R.REVIEW_CONTENT,
			R.RATING,
			R.REVIEW_THUMBNAIL_ORIGIN,
			R.REVIEW_THUMBNAIL_CHANGE,
			R.REVIEW_DATE,
			R.STATUS,
			R.PRODUCT_NO,
			R.MEMBER_ID,
			M.MEMBER_NAME,
			P.PRODUCT_NAME,
			P.PRODUCT_CHANGE
		FROM REVIEW R
		JOIN MEMBER M ON R.MEMBER_ID = M.MEMBER_ID
		JOIN PRODUCT P ON R.PRODUCT_NO = P.PRODUCT_NO
		WHERE R.REVIEW_NO = #{reviewNo}
		  AND R.STATUS = 'Y'
	</select>

	<!-- 좋아요 관련 쿼리들 -->
	<select id="checkExistingLike" parameterType="map" resultType="_int">
		SELECT COUNT(*)
		FROM TB_LIKE
		WHERE REVIEW_NO = #{reviewNo}
		  AND MEMBER_ID = #{memberId}
	</select>

	<insert id="addLike" parameterType="map">
		INSERT INTO TB_LIKE (
			REVIEW_NO,
			MEMBER_ID
		) VALUES (
			#{reviewNo},
			#{memberId}
		)
	</insert>

	<delete id="removeLike" parameterType="map">
		DELETE FROM TB_LIKE
		WHERE REVIEW_NO = #{reviewNo}
		  AND MEMBER_ID = #{memberId}
	</delete>

	<select id="getLikeCount" parameterType="_int" resultType="_int">
		SELECT COUNT(*)
		FROM TB_LIKE
		WHERE REVIEW_NO = #{reviewNo}
	</select>

</mapper>